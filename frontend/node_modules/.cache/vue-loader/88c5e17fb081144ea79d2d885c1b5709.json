{"remainingRequest":"/home/ntwari/Documents/judapp/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/ntwari/Documents/judapp/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ntwari/Documents/judapp/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ntwari/Documents/judapp/frontend/src/components/welcomepage.vue?vue&type=template&id=2663bade&","dependencies":[{"path":"/home/ntwari/Documents/judapp/frontend/src/components/welcomepage.vue","mtime":1592224527267},{"path":"/home/ntwari/Documents/judapp/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1588020407950},{"path":"/home/ntwari/Documents/judapp/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1588020497251},{"path":"/home/ntwari/Documents/judapp/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1588020407950},{"path":"/home/ntwari/Documents/judapp/frontend/node_modules/vue-loader/lib/index.js","mtime":1588020497251}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}